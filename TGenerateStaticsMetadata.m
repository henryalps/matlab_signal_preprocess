function TGenerateStaticsMetadata(alth_type_str, feature_all_or_part)
%TGENERATESTATICSMETADATA ????????????????????????????????????
%% ???????????????????????????sbp_meta dbp_meta, ???????????????????????????/????????????????????????csv????????????
dbp_meta_data = load(fullfile(Constants.APPENDIX_PACE_2_PACE_LONG_LONG_CSV, Constants.METADATA_FOLDER_NAME, 'dbpmeta.mat'));
sbp_meta_data = load(fullfile(Constants.APPENDIX_PACE_2_PACE_LONG_LONG_CSV, Constants.METADATA_FOLDER_NAME, 'sbpmeta.mat'));
dbp_meta_data = dbp_meta_data.dbp_meta;
sbp_meta_data = sbp_meta_data.sbp_meta;

%% ?????????????????????-????????????????????????/????????????
dbp_meta = generateMetadata(dbp_meta_data, alth_type_str, Constants.DBP_FOLDER_NAME, feature_all_or_part, Constants.TYPE_DBP);
sbp_meta = generateMetadata(sbp_meta_data, alth_type_str, Constants.SBP_FOLDER_NAME, feature_all_or_part, Constants.TYPE_SBP);

%% ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
meta = dbp_meta;
save(fullfile(Constants.APPENDIX_PACE_2_PACE_LONG_LONG_CSV, Constants.METADATA_FOLDER_NAME, [feature_all_or_part, '_', alth_type_str, '_', Constants.DBP_FOLDER_NAME]), 'meta')
meta = sbp_meta;
save(fullfile(Constants.APPENDIX_PACE_2_PACE_LONG_LONG_CSV, Constants.METADATA_FOLDER_NAME, [feature_all_or_part, '_', alth_type_str, '_', Constants.SBP_FOLDER_NAME]), 'meta')

end

function metadata_all_group = generateMetadata(meta_data, alth_type, blood_type_path, feature_all_or_part, bp_type)
metadata_all_group = {};
for i=1:size(meta_data, 1)
    %% ??????????????????/??????????????????0???????????????????????????
    if meta_data{i, 7} == 0 || meta_data{i, 8} == 0
        continue
    end
    %% ????????????????????????????????????
    data = load(meta_data{i, 9});
    if bp_type == Constants.TYPE_DBP
        data = data.dbpnums;
    else
        data = data.sbpnums;
    end
    file_path = fullfile(Constants.APPENDIX_PACE_2_PACE_LONG_LONG_CSV, feature_all_or_part, blood_type_path, alth_type, strrep(meta_data{i, 1}, 'csv', 'mat'));
    try
            [metadata_one_group, orig, est] = generateMetadataForOneGroup(file_path);
    catch e
        continue
    end
    metadata_one_group{1} = meta_data{i,1};
    
    metadata_one_group{10} = getTimeLenType(meta_data{i, 7});    
    metadata_one_group{11} = getTimeLenType(meta_data{i, 8});
    
    metadata_one_group{13} = meta_data{i, 10};
    metadata_one_group{14} = meta_data{i, 11};
    
%     metadata_one_group{15} = ...
%         get24HourErrorSeq(orig, est, data(meta_data{i, 5}:meta_data{i, 6}, 1));
%     
%     metadata_one_group{16} = ...
%         get24HourCorrSeq(orig, est, data(meta_data{i, 5}:meta_data{i, 6}, 1));
    metadata_all_group = [metadata_all_group; metadata_one_group];
end
end

function [metadata_one_group, orig, est] = generateMetadataForOneGroup(file_path)    
    metadata_one_group = cell(1, 14);
    try
        est = load(file_path);
    catch e
        % 10. ????????????????????????
        metadata_one_group{12} = false;
        return
    end
    metadata_one_group{12} = true;
    orig = est.orig;
    est = est.est;
    
    % ??????????????????????????????
    orig = orig(:);
    est = est(:);
    %% ??????????????????/???????????????????????????
    %-1: csv????????????
    % 0. ?????????
    % 1. p???
    [metadata_one_group{2}, metadata_one_group{3}] = corr(orig, est);
    % 2. ????????????MSE
    metadata_one_group{4} = sqrt(mse(orig,est));
    % 3. ??????????????????????????????
    metadata_one_group{5} = max(orig) - min(orig);
    % 4. ?????????????????????????????????
    metadata_one_group{6}  = std(orig);
    % 5. ?????????/p???????????????0.6????????????0.05
    metadata_one_group{7} = metadata_one_group{2} >= 0.6 && metadata_one_group{3} <= 0.05;
    % 6. BHS????????????(A=0, B=1, C=2, ???=3)
    metadata_one_group{8} = getBHSType(orig, est);
    % 7. ????????????AAMI(true/false)
    metadata_one_group{9} = isReachedAAMI(orig, est);
    % 8. ????????????????????????30/1/3/6 - 0/1/2/3???{10}
    % 9. ????????????????????????30/1/3/6 - 0/1/2/3 ??????????????????    {11}
    % 10. ???????????????????????? {12}
    % 11. ?????????????????? {13}
    % 12. ????????????????????? {14}
    % 13. ???OPTIONAL???24??????????????????????????? {15}
    % 14. ???OPTIONAL???24???????????????????????? {16}
end

function time_len_type = getTimeLenType(time_len)    
train_set_time_len = [30 * 60, 60 * 60, 3 * 60 * 60, 6 * 60 * 60] * getSampleRate(); %?????????????????????
[~, time_len_type] = min(abs(train_set_time_len - time_len)) ;
time_len_type = time_len_type - 1;
end

function reach_aami = isReachedAAMI(org, est)
    org = abs(org-est);
    reach_aami = mean(org)<=10 && std(org)<=5;
end

function class = getBHSType(org, est)
    a = sum(abs(org - est) <= 5) / length(org) * 100;    
    b = sum(abs(org - est) <= 10) / length(org) * 100;
    c = sum(abs(org - est) <= 15) / length(org) * 100;
    if a>=60 && b>=85 && c>=95
        class = 0;
        return
    end
    if a>=50 && b>=75 && c>=90
        class = 1;
        return
    end
    if a>=40 && b>=65 && c>=85
        class = 2;
        return
    end
    class = 3;
end

function errors = get24HourErrorSeq(orig, est, times)
%% get24HourErrorSeq ????????????24????????????????????????????????????????????????
times = times - times(1);
errors = zeros(1,24);
SEG_LEN = getSampleRate() * 60 * 60;
for i = 1:24
    indexes = (times >= (i-1)* SEG_LEN) & (times <= i*SEG_LEN);
    errors(i) = (mean(orig(indexes) - est(indexes)));
    if isnan(errors(i))
        errors(i) = errors(i - 1);
    end
end
%errors = errors/max(abs(errors));
end

function corrs = get24HourCorrSeq(orig, est, times)
%% get24HourCorrSeq ????????????24?????????????????????????????????????????????
times = times - times(1);
corrs = zeros(1,24);
SEG_LEN = getSampleRate() * 60 * 60;
for i = 1:24
    indexes = (times >= (i-1)* SEG_LEN) & (times <= i*SEG_LEN);
    try 
        corrs(i) = (corr(orig(indexes) , est(indexes)));
    catch e
        corrs(i) = NaN;
    end
    if isnan(corrs(i))
        corrs(i) = corrs(i - 1);
    end
end
%corrs = corrs/max(abs(corrs));
end
